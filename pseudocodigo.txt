Pseudo-codigo Red WAN:

WAN_network(Distancia Maxima, Limite de antenas backupeadas por antena, Minimo de antenas backup, arrays de distancias)
    
    network = create_graph(...)
    #Llamado a la funcion create_graph(...), descrita mas abajo

    flujo_maximo_posible, backups = Algoritmo Edmonds-Karp, descrito mas abajo

    si flujo_maximo_posible < cantidad de antenas * Minimo de antenas backup
        No se puede alcanzar el numero minimo de antenas backup para cada antena.
        return 
    sino (si se alcanzo el numero esperado):
        imprimir los backups
        #Llamado a print_connections, descrita mas abajo
    
    return backups

print_connections(diccionario de backups):
    por cada nodo u del grafo de backups:
        por cada nodo v adyacente a u:
            flow (flujo) = valor de la clave v del diccionario u (flujo de la arista)
            si flujo es 1:
                imprimir arista u -> v 

create_graph(...)
    grafo = Grafo dirigido, pesado.

    grafo añado nodos S y T

    por cada antena dentro del array d:
        grafo añado nodos antena In y antena Out
        grafo añado arista s -> antena In, con peso Limite de antenas backupeadas por antena
        grafo añado arista antena Out -> T, con peso Minimo de antenas backup 
    
    por cada antena i:
        por cada antena j:
            si j != i y la distancia de i a j es menor a Distancia Maxima:
                grafo añado arista i In -> j Out, con peso 1

    return grafo


Algoritmo Edmonds Karp (network):
    flujo_acumulado = 0
    grafo_residual = network, con 

    mientras haya un camino de s a t posible (usando BFS):

        tomar la capacidad minima del recorrido

        flujo_acumulado += capacidad minima
        
        por cada par u, v del recorrido:
            flujo arista(u, v) del grafo_residual -= capacidad minima
            flujo arista(v, u) del grafo_residual += capacidad minima

    return flujo_acumulado, grafo_residual
    
